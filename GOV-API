program pnw_government_api.aleo;

use std::crypto::pedersen_commit;
use std::collections::map;

// **ðŸ”¹ Government API Request**
struct GovernmentAPIRequest {
    government_id: field,
    worker_id: u32,
    request_type: field,  
    zpass_proof: option<field>, 
}

// **ðŸ”¹ Declare Mappings**
mapping government_requests: map<u32, GovernmentAPIRequest>;
mapping approved_governments: map<field, bool>; // Stores approved agencies

// **ðŸ”¹ Approve Government Agencies for API Access**
transition approve_government_agency(government_id: field) -> bool {
    approved_governments[government_id] = true;
    return true;
}

// **ðŸ”¹ Government Requests Worker Verification (ZPass Optional)**
transition request_worker_verification(government_id: field, worker_id: u32, request_type: field, zpass_proof: option<field>) -> bool {
    assert(approved_governments[government_id], "Unauthorized government request");

    if zpass_proof.is_some() {
        assert(verify_zpass(zpass_proof.unwrap()), "Invalid ZPass Proof");
    }

    let request = GovernmentAPIRequest { government_id, worker_id, request_type, zpass_proof };
    government_requests[worker_id] = request;

    return true;
}
